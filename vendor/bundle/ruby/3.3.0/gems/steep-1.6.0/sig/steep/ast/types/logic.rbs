module Steep
  module AST
    module Types
      module Logic
        class Base
          attr_reader location: untyped

          def subst: (Interface::Substitution s) -> self

          include Helper::NoFreeVariables

          include Helper::NoChild

          def hash: () -> Integer

          def ==: (untyped other) -> bool

          alias eql? ==

          def to_s: () -> String

          def level: () -> Array[Integer]
        end

        # A type for `!` (not) operator results.
        class Not < Base
          def initialize: (?location: untyped?) -> void
        end

        # A type for `foo.nil?` call results.
        class ReceiverIsNil < Base
          def initialize: (?location: untyped?) -> void
        end

        #
        class ReceiverIsNotNil < Base
          def initialize: (?location: untyped?) -> void
        end

        # A type for `receiver.is_a?(C)` call results.
        class ReceiverIsArg < Base
          def initialize: (?location: untyped?) -> void
        end

        # A type for `Class#===` call results.
        class ArgIsReceiver < Base
          def initialize: (?location: untyped?) -> void
        end

        # A type for `Object#===` call results.
        class ArgEqualsReceiver < Base
          def initialize: (?location: untyped?) -> void
        end

        # A type for `Class#<` or `Class#<=` call results.
        class ArgIsAncestor < Base
          def initialize: (?location: untyped?) -> void
        end

        # A type with truthy/falsy type environment.
        class Env < Base
          attr_reader truthy: TypeInference::TypeEnv

          attr_reader falsy: TypeInference::TypeEnv

          attr_reader type: t

          def initialize: (truthy: TypeInference::TypeEnv, falsy: TypeInference::TypeEnv, type: t, ?location: untyped) -> void

          def ==: (untyped other) -> bool

          alias eql? ==

          def hash: () -> Integer

          def inspect: () -> String

          alias to_s inspect
        end
      end
    end
  end
end
