module Steep
  module TypeInference
    class ContextArray
      class Entry
        attr_reader range: Range[Integer]

        attr_reader context: Context

        attr_reader sub_entries: Set[Entry]

        def initialize: (range: Range[Integer], context: Context) -> void
      end

      attr_reader buffer: RBS::Buffer

      attr_reader root: Entry

      def initialize: (buffer: RBS::Buffer, context: Context, ?range: Range[Integer]) -> void

      def range: () -> Range[Integer]

      def self.from_source: (source: Source, ?range: Range[Integer]?, context: Context) -> ContextArray

      def insert_context: (Range[Integer] range, context: Context, ?entry: Entry) -> void

      def each_entry: () { (Entry) -> void } -> void
                    | () -> Enumerator[Entry, void]

      def context_at: (Integer index, ?entry: Entry) -> Context?

      def []: (Integer index) -> Context?

      def at: (line: Integer, column: Integer) -> Context?

      def merge: (ContextArray subtree) -> void
    end
  end
end
