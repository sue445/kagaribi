use RBS::Environment

module Steep
  module Services
    class SignatureHelpProvider
      module MethodCall = TypeInference::MethodCall

      class Item
        attr_reader method_type: RBS::MethodType

        attr_reader comment: RBS::AST::Comment?

        attr_reader active_parameter: Integer?

        def initialize: (RBS::MethodType, RBS::AST::Comment?, Integer?) -> void

        def parameters: () -> Array[String]
      end

      attr_reader source: Source

      attr_reader path: Pathname

      attr_reader subtyping: Subtyping::Check

      attr_reader buffer: RBS::Buffer

      def env: () -> Environment

      def initialize: (source: Source, subtyping: Subtyping::Check) -> void

      # 1-origin line, 0-origin column
      #
      def run: (line: Integer, column: Integer) -> [Array[Item], Integer?]?

      private

      def active_parameter_for: (RBS::MethodType?, Array[Parser::AST::Node], Array[Parser::AST::Node]?, Parser::AST::Node) -> Integer?

      def arguments_for: (RBS::MethodType) -> Array[String]

      def last_argument_nodes_for: (argument_nodes: Array[Parser::AST::Node], line: Integer, column: Integer) -> Array[Parser::AST::Node]?

      def signature_help_for: (Parser::AST::Node, Array[Parser::AST::Node], Array[Parser::AST::Node]?, Typing) -> [Array[Item], Integer?]?

      def type_check!: (line: Integer, column: Integer) -> Typing
    end
  end
end
